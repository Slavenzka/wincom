version: 0.1

phases:
  install:
    commands:
      - echo Entering install phase...
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws sts get-caller-identity
      - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 015404077857.dkr.ecr.eu-central-1.amazonaws.com

#      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
#      - chmod +x ./kubectl
#      - mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
#      - kubectl version --short --client
#      - curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
#      - chmod +x ./aws-iam-authenticator
#      - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH
#      - aws-iam-authenticator help
#      - aws eks --region eu-central-1 update-kubeconfig --name wincom-wb
  build:
    commands:
      - echo Build started on `date`
      - npm install
      - npm run build
      - docker build -t wincom-web .
      - docker tag wincom-web 015404077857.dkr.ecr.eu-central-1.amazonaws.com/wincom-web
  post_build:
    commands:
      - docker push 015404077857.dkr.ecr.eu-central-1.amazonaws.com/wincom-web
      - aws sts get-caller-identity
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID=$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      #  updates the default kubeconfig file to use your cluster as the current context
      - aws eks --region eu-central-1 update-kubeconfig --name wincom-web
 # создать ресурсы
      - kubectl apply -f wincom-web-eks.yaml
  # Перезапуск плавающего развёртывания "frontend"
      - kubectl rollout restart deployment/wincom-web
#      - kubectl apply -f wincom-web-eks.yaml
#      - kubectl rollout restart deployment/wincom-web
artifacts:
  type: image
